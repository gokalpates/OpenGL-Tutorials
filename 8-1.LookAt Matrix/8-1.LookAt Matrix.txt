#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include "stb_image.h"

#include <thread>
#include <cmath>

// OpenGL Math library that we will use to transform, rotate, etc.
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "glm/gtc/type_ptr.hpp"

#include "Shader.h"

float vertices[] = {
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,

	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f
};

void windowSizeCallback(GLFWwindow* window, int width, int height);
void handleInput(GLFWwindow* window);

int main()
{
	glfwInit();

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	GLFWwindow* window = glfwCreateWindow(800, 600, "Window", nullptr, nullptr);
	if (window == nullptr)
	{
		std::cout << "ERROR: Program could not create a window.\n";
		glfwTerminate();
		return 1;
	}
	glfwMakeContextCurrent(window);
	glfwSetWindowSizeCallback(window, windowSizeCallback);

	gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);
	
	Shader program("shader/vertexShader.vert", "shader/fragmentShader.frag");

	// Generate texture buffer in vram.
	unsigned int texture;
	glGenTextures(1, &texture);

	// Activate Texture Unit 0
	glActiveTexture(GL_TEXTURE0);
	// Bind texture.
	glBindTexture(GL_TEXTURE_2D, texture);

	// Set texture parameters
	float borderColor[] = { 0.f,1.f,0.f,1.f };
	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST);

	// Load it as OpenGL style yAxis.
	stbi_set_flip_vertically_on_load(true);
	// Load texture named as wall.jpg
	int textureWidth, textureHeight, nrChannels;
	unsigned char* data = stbi_load("textures/wall.jpg", &textureWidth, &textureHeight, &nrChannels, 0);
	if (data)
	{
		// Buffer texture data and generate mipmap
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "ERROR: Program could not load texture 1.\n";
		stbi_image_free(data);
		glfwTerminate();
		return 1;
	}
	stbi_image_free(data);
	//Unbind texture.
	glBindTexture(GL_TEXTURE_2D, 0);

	unsigned int texture2;
	glGenTextures(1, &texture2);
	// Activate texture Unit 1.
	glActiveTexture(GL_TEXTURE1);
	glBindTexture(GL_TEXTURE_2D, texture2);
	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST);

	int textureWidth2, texturewHeight2, nrChannels2;
	unsigned char* data2 = stbi_load("textures/awesomeface.png", &textureWidth2, &texturewHeight2, &nrChannels2, 0);
	if (data2)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth2, texturewHeight2, 0, GL_RGBA, GL_UNSIGNED_BYTE, data2);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "ERROR: Program could not load texture 2.\n";
		stbi_image_free(data);
		glfwTerminate();
		return 1;
	}
	stbi_image_free(data2);
	glBindTexture(GL_TEXTURE_2D, 0);

	unsigned int VAO;
	unsigned int VBO;

	glGenVertexArrays(1, &VAO);
	glBindVertexArray(VAO);

	glGenBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);
	
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glBindVertexArray(0);

	glClearColor(0.f, 0.f, 0.f, 1.f);
	
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture);

	glActiveTexture(GL_TEXTURE1);
	glBindTexture(GL_TEXTURE_2D, texture2);

	glBindVertexArray(VAO);
	program.use();

	glUniform1i(glGetUniformLocation(program.id, "ourTexture"), 0);
	glUniform1i(glGetUniformLocation(program.id, "ourTexture2"), 1);

	glEnable(GL_DEPTH_TEST);
	
	glm::vec3 cameraPosition(0.f,0.f,3.f);
	glm::vec3 cameraTarget(0.f, 0.f, 0.f);
	glm::vec3 cameraDirection = glm::normalize(cameraPosition - cameraTarget);
	glm::vec3 cameraInitUp(0.f, 1.f, 0.f);
	glm::vec3 cameraRight = glm::normalize(glm::cross(cameraInitUp, cameraDirection));
	glm::vec3 cameraUp = glm::normalize(glm::cross(cameraDirection,cameraRight));

	while (!glfwWindowShouldClose(window))
	{
		glfwPollEvents();
		handleInput(window);

		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glm::mat4 model(1.f);
		model = glm::rotate(model, glm::radians(45.f), glm::vec3(1.f, 1.f,0.f));
		program.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		model = glm::mat4(1.f);
		model = glm::translate(model, glm::vec3(1.f, 0.8f, 1.f));
		model = glm::rotate(model, glm::radians(20.f), glm::vec3(1.f, 0.3f, 0.8f));
		program.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		const float radius = 5.f;
		float camX = std::cosf(glfwGetTime()) * radius;
		float camZ = std::sinf(glfwGetTime()) * radius;
		cameraPosition = glm::vec3(camX, 0.0, camZ);
		glm::mat4 view = glm::lookAt(cameraPosition, cameraTarget, cameraUp);
		program.setMat4("view", view);

		glm::mat4 projection;
		projection = glm::perspective(45.f, 800.f / 600.f, 0.1f, 100.f);
		program.setMat4("projection", projection);


		glfwSwapBuffers(window);
	}

	glfwTerminate();
	return 0;
}

void windowSizeCallback(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
}

void handleInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GLFW_TRUE);
}
