#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include "stb_image.h" // Header that allows to load common image types

#include "Shader.h"
#include <thread>

float vertices[] =
{
	// Positions       // Colors           // Texture coordinates
	-0.5f, -0.5f, 0.f, 1.f, 0.f, 0.f, 0.f, 0.f, // Bottom left.
	 0.5f, -0.5f, 0.f, 0.f, 1.f, 0.f, 1.f, 0.f, // Bottom right.
	 0.5f,  0.5f, 0.f, 0.f, 0.f, 1.f, 1.f, 1.f, // Top right.
	-0.5f,  0.5f, 0.f, 1.f, 1.f, 0.f, 0.f, 1.f  // Top left.
};

unsigned int drawOrder[] =
{
	0,1,2,
	2,0,3
};

void windowSizeCallback(GLFWwindow* window, int width, int height);
void handleInput(GLFWwindow* window);

int main()
{
	glfwInit();

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	GLFWwindow* window = glfwCreateWindow(800, 600, "Window", nullptr, nullptr);
	if (window == nullptr)
	{
		std::cout << "ERROR: Program could not create a window.\n";
		glfwTerminate();
		return 1;
	}
	glfwMakeContextCurrent(window);
	glfwSetWindowSizeCallback(window, windowSizeCallback);

	gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);
	
	Shader program("shader/vertexShader.vert", "shader/fragmentShader.frag");



	// Generate texture buffer in vram.
	unsigned int texture;
	glGenTextures(1, &texture);
	// Bind texture.
	glBindTexture(GL_TEXTURE_2D, texture);

	// Set texture parameters
	float borderColor[] = { 0.f,1.f,0.f,1.f };
	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST);

	// Load texture named as wall.jpg
	int textureWidth, textureHeight, nrChannels;
	unsigned char* data = stbi_load("textures/wall.jpg", &textureWidth, &textureHeight, &nrChannels, 0);
	if (data)
	{
		// Buffer texture data and generate mipmap
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "ERROR: Program could not load texture.\n";
		stbi_image_free(data);
		glfwTerminate();
		return 1;
	}
	stbi_image_free(data);
	//Unbind texture.
	glBindTexture(GL_TEXTURE_2D, 0);

	unsigned int VAO;
	unsigned int VBO;
	unsigned int EBO;

	glGenVertexArrays(1, &VAO);
	glBindVertexArray(VAO);

	glGenBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);
	
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);

	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glGenBuffers(1, &EBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(drawOrder), &drawOrder, GL_STATIC_DRAW);

	glBindVertexArray(0);

	glClearColor(0.f, 0.f, 0.f, 1.f);
	
	glBindTexture(GL_TEXTURE_2D, texture);
	glBindVertexArray(VAO);
	program.use();

	while (!glfwWindowShouldClose(window))
	{
		glfwPollEvents();
		handleInput(window);

		glClear(GL_COLOR_BUFFER_BIT);

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		glfwSwapBuffers(window);
	}

	glfwTerminate();
	return 0;
}

void windowSizeCallback(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
}

void handleInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GLFW_TRUE);
}
